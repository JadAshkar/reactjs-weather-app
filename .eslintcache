[{"C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\index.js":"1","C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\reportWebVitals.js":"2","C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\App.js":"3","C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\services\\index.js":"4","C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\layouts\\main-layout.js":"5","C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\components\\search-page\\index.js":"6","C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\components\\search-page\\input-search.js":"7","C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\components\\search-page\\weather-info.js":"8","C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\components\\search-page\\location-dialog.js":"9","C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\components\\navigation-bar\\index.js":"10","C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\components\\page-not-found\\index.js":"11","C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\components\\history-page\\index.js":"12","C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\state\\reducer.js":"13","C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\state\\action.js":"14","C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\state\\selectors.js":"15","C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\state\\sagas.js":"16"},{"size":832,"mtime":1613811740691,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"18"},{"size":746,"mtime":1612000089114,"results":"20","hashOfConfig":"18"},{"size":398,"mtime":1611990496629,"results":"21","hashOfConfig":"18"},{"size":1011,"mtime":1611998743230,"results":"22","hashOfConfig":"18"},{"size":1456,"mtime":1611994653032,"results":"23","hashOfConfig":"18"},{"size":5482,"mtime":1613814436627,"results":"24","hashOfConfig":"18"},{"size":6437,"mtime":1611993929465,"results":"25","hashOfConfig":"18"},{"size":1670,"mtime":1613818673728,"results":"26","hashOfConfig":"18"},{"size":1082,"mtime":1611997709759,"results":"27","hashOfConfig":"18"},{"size":144,"mtime":1611998653102,"results":"28","hashOfConfig":"18"},{"size":3768,"mtime":1613810502416,"results":"29","hashOfConfig":"18"},{"size":576,"mtime":1613814181127,"results":"30","hashOfConfig":"18"},{"size":478,"mtime":1613812886277,"results":"31","hashOfConfig":"18"},{"size":114,"mtime":1613813858815,"results":"32","hashOfConfig":"18"},{"size":533,"mtime":1613812903068,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"14h59qy",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\index.js",[],["70","71"],"C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\reportWebVitals.js",[],"C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\App.js",[],"C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\services\\index.js",[],"C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\layouts\\main-layout.js",[],"C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\components\\search-page\\index.js",["72"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SearchInput from './input-search';\r\nimport WeatherInfo from './weather-info'\r\nimport LocationDialog from './location-dialog';\r\n\r\nconst SearchPage = () => {\r\n    const [currentWeatherInfo, setCurrentWeatherInfo] = useState({})\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [isDialogOpen , setIsDialogOpen] = useState(false)\r\n\r\n    const onCloseDialog = () =>{\r\n        setIsDialogOpen(false)\r\n    }\r\n    \r\n    const {location} = currentWeatherInfo;\r\n    return(\r\n        <>\r\n            <Grid container direction=\"column\">\r\n                <Grid item>\r\n                    <SearchInput\r\n                        setCurrentWeatherInfo={setCurrentWeatherInfo}\r\n                        setIsLoading={setIsLoading}\r\n                        isLoading={isLoading}\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <WeatherInfo\r\n                        weatherInfo={currentWeatherInfo}\r\n                        isLoading={isLoading}\r\n                        setIsDialogOpen = {setIsDialogOpen}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <LocationDialog\r\n                open={isDialogOpen}\r\n                handleClose={onCloseDialog}\r\n                location={location}\r\n            />\r\n        </>\r\n        \r\n    )\r\n}\r\n\r\nexport default SearchPage;","C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\components\\search-page\\input-search.js",["73"],"import React,{ useState, useEffect } from 'react'\r\n\r\n//import { createBrowserHistory } from \"history\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addCity } from \"../../state/action\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { setectCityWeather } from \"../../state/selectors\";\r\n\r\nimport services from '../../services'\r\n\r\n\r\nimport {makeStyles} from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button';\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\n\r\nconst useStyles = makeStyles(() =>({\r\n    root: {\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        marginBottom: 30,\r\n    }\r\n}));\r\n\r\nconst SearchInput  =(props) => {\r\n\r\n    const { setCurrentWeatherInfo } = props;\r\n    const { setIsLoading } = props;\r\n    const {isLoading} = props; \r\n\r\n    const classes = useStyles();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    //const browserHistory = createBrowserHistory(); \r\n\r\n    const [ cityName, setCityName ] = useState('');\r\n    const [isSnackbarOpen, setIsSnackbarOpen] = useState(false);\r\n    const [snackBarMessage, SetSnackBarMessage] = useState('')\r\n\r\n    const onCityNameChange = (event) =>{\r\n        setCityName(event.target.value)\r\n    }\r\n\r\n    const getCityCurrentWeather = (cityName) => {\r\n        setIsLoading(true);\r\n        services.getWeatherByCityName(cityName)\r\n            .then((response) =>{\r\n                const {data} = response;\r\n                if(!data.error){\r\n                    setCurrentWeatherInfo(data);\r\n                }\r\n                else{\r\n                    setIsSnackbarOpen(true);\r\n                    const errorMessage = data.error.info\r\n                    SetSnackBarMessage(errorMessage)\r\n                }\r\n            })\r\n            .finally( () => {\r\n                setIsLoading(false)\r\n            })\r\n    }\r\n\r\n    const onButtonClick = () => {\r\n        //browserHistory.push('/test-url');\r\n        getCityCurrentWeather(cityName);\r\n        sessionStorage.WEATHER_APP_CITY_NAME = cityName;\r\n        dispatch(addCity(cityName));\r\n\r\n        if(sessionStorage.WEATHER_APP_CITIES){\r\n            const cities = JSON.parse(sessionStorage.WEATHER_APP_CITIES)\r\n            cities.push(cityName)\r\n            sessionStorage.WEATHER_APP_CITIES = JSON.stringify(cities)\r\n        } else {\r\n            const cities = []\r\n            sessionStorage.WEATHER_APP_CITIES = JSON.stringify(cities)\r\n        }\r\n\r\n        if(localStorage.WEATHER_APP_CITIES){\r\n            const cities = JSON.parse(localStorage.WEATHER_APP_CITIES)\r\n            cities.push(cityName)\r\n            localStorage.WEATHER_APP_CITIES = JSON.stringify(cities)\r\n        } else {\r\n            const cities = []\r\n            localStorage.WEATHER_APP_CITIES = JSON.stringify(cities)\r\n        }\r\n    }\r\n\r\n    const onSnackbarClose = () =>{\r\n        setIsSnackbarOpen(false)\r\n    }\r\n\r\n    const getCurrentCityName = () => {\r\n        setIsLoading(true);\r\n        services.getCurrentLocation()\r\n            .then((response) =>{\r\n                const currentCity = response?.data?.city;\r\n                setCityName(currentCity);\r\n                getCityCurrentWeather(currentCity);\r\n            })\r\n            .finally(() => {\r\n                setIsLoading(false);\r\n            })\r\n    }\r\n\r\n    const searchParams = new URLSearchParams(useLocation().search)\r\n    const cityParam = searchParams.get('city')\r\n\r\n    const reduxCityWeather = useSelector(setectCityWeather)\r\n\r\n    useEffect(() => {\r\n        if(reduxCityWeather){\r\n            setCityName(reduxCityWeather.location.name)\r\n            setCurrentWeatherInfo(reduxCityWeather)\r\n        }\r\n        else if(cityParam){\r\n            setCityName(cityParam)\r\n            getCityCurrentWeather(cityParam)\r\n        }\r\n        else if(sessionStorage.WEATHER_APP_CITY_NAME) {\r\n            const storedCity = sessionStorage.WEATHER_APP_CITY_NAME;\r\n            setCityName(storedCity);\r\n            getCityCurrentWeather(storedCity);\r\n        }\r\n        else{\r\n            getCurrentCityName();\r\n        }\r\n    }, [cityParam, reduxCityWeather])\r\n\r\n\r\n\r\n    return(\r\n        <>\r\n            < Grid container spacing={3} className={classes.root}>\r\n                <Grid item md={11} xs={12}>\r\n                    <TextField\r\n                        label = \"City\"\r\n                        variant = \"outlined\"\r\n                        placeholder = \"Type city name here\"\r\n                        fullWidth = {true}\r\n                        value = {cityName}\r\n                        onChange = {onCityNameChange}\r\n                    />\r\n                </Grid >\r\n                <Grid item md={1}>\r\n                    <Button\r\n                        variant = \"contained\"\r\n                        onClick = {onButtonClick}\r\n                        color = \"primary\"\r\n                        disabled={isLoading}\r\n                    >\r\n                        search\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n            <Snackbar\r\n                anchorOrigin = {{\r\n                    vertical: 'top',\r\n                    horizontal: 'right',\r\n\r\n                }}\r\n                open = {isSnackbarOpen}\r\n                onClose = {onSnackbarClose}\r\n                message = {snackBarMessage}\r\n                autoHideDuration = {3000}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SearchInput;","C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\components\\search-page\\weather-info.js",[],"C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\components\\search-page\\location-dialog.js",[],"C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\components\\navigation-bar\\index.js",[],"C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\components\\page-not-found\\index.js",[],"C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\components\\history-page\\index.js",["74","75"],"import React  from 'react'\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { useEffect } from \"react\";\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nimport { selectCities } from \"../../state/selectors\";\r\n\r\nimport { getCityWeather } from \"../../state/action\";\r\n\r\nconst HistoryPage = () => {\r\n\r\n    const reduxCities = useSelector(selectCities);\r\n    const sessionCities = sessionStorage.WEATHER_APP_CITIES ? JSON.parse(sessionStorage.WEATHER_APP_CITIES) : []\r\n    const localCities = localStorage.WEATHER_APP_CITIES ? JSON.parse(localStorage.WEATHER_APP_CITIES) : []\r\n\r\n    const dispatch = useDispatch()\r\n    const onClickCity = city => {\r\n        dispatch(getCityWeather(city));\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            City (Redux)\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {reduxCities.map((city,index)=>(\r\n                        <TableRow key={index}>\r\n                            <TableCell>\r\n                                <Typography>\r\n                                    <Link to=\"/\" onClick={()=> onClickCity(city)}>\r\n                                        {city}\r\n                                    </Link>\r\n                                </Typography>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n            <hr/>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            City (Session)\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {sessionCities.map((city,index)=>(\r\n                        <TableRow key={index}>\r\n                            <TableCell>\r\n                            <Typography>\r\n                                    <Link to=\"/\" onClick={()=> onClickCity(city)}>\r\n                                        {city}\r\n                                    </Link>\r\n                                </Typography>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n            <hr/>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            City (Storage)\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {localCities.map((city,index)=>(\r\n                        <TableRow key={index}>\r\n                            <TableCell>\r\n                                <Typography>\r\n                                    <Link to={`/search?city=${city}`}> \r\n                                        {city}\r\n                                    </Link>\r\n                                </Typography>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default HistoryPage","C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\state\\reducer.js",[],"C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\state\\action.js",[],"C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\state\\selectors.js",[],"C:\\My Documents\\Full Stack Bootcamp\\Front End\\React\\weather-app\\src\\state\\sagas.js",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":1,"column":27,"nodeType":"82","messageId":"83","endLine":1,"endColumn":36},{"ruleId":"84","severity":1,"message":"85","line":130,"column":8,"nodeType":"86","endLine":130,"endColumn":37,"suggestions":"87"},{"ruleId":"80","severity":1,"message":"88","line":7,"column":10,"nodeType":"82","messageId":"83","endLine":7,"endColumn":20},{"ruleId":"80","severity":1,"message":"81","line":13,"column":10,"nodeType":"82","messageId":"83","endLine":13,"endColumn":19},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getCityCurrentWeather', 'getCurrentCityName', and 'setCurrentWeatherInfo'. Either include them or remove the dependency array.","ArrayExpression",["91"],"'makeStyles' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},"Update the dependencies array to be: [cityParam, getCityCurrentWeather, getCurrentCityName, reduxCityWeather, setCurrentWeatherInfo]",{"range":"94","text":"95"},[4148,4177],"[cityParam, getCityCurrentWeather, getCurrentCityName, reduxCityWeather, setCurrentWeatherInfo]"]